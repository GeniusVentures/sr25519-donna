#+title: sr25519-donna

This is a pure C implementation of polkadot's key derivation and signing algorithm [[https://wiki.polkadot.network/docs/en/learn-cryptography][schnorrkel]]. The goal is to fully compatible with the original [[https://github.com/w3f/schnorrkel][rust version]]. The curve operations are based on [[https://github.com/floodyberry/ed25519-donna][ed25519-donna]].

* Run Tests
#+BEGIN_SRC sh
mkdir build
cd build
cmake ..
make
./sr25519DonnaTests
#+END_SRC

* Usage
#+BEGIN_SRC C
    #include "sr25519-donna.h"
#+END_SRC
** create keypair from seed
#+BEGIN_SRC C
void sr25519_keypair_from_seed(sr25519_keypair keypair, const sr25519_mini_secret_key seed);
#+END_SRC
** sign message
#+BEGIN_SRC C
void sr25519_sign(sr25519_signature signature, const sr25519_public_key public, const sr25519_secret_key secret, const uint8_t *message, unsigned long message_length);
#+END_SRC
** verify message
#+BEGIN_SRC C
bool sr25519_verify(const sr25519_signature signature, const uint8_t *message, unsigned long message_length, const sr25519_public_key public);
#+END_SRC
** soft derive keypair
#+BEGIN_SRC C
void sr25519_derive_keypair_soft(sr25519_keypair derived, const sr25519_keypair keypair, const sr25519_chain_code chain_code);
#+END_SRC
** soft derive public key
#+BEGIN_SRC C
void sr25519_derive_public_soft(sr25519_public_key derived_public, const sr25519_public_key public, const sr25519_chain_code chain_code);
#+END_SRC
** hard derive keypair
#+BEGIN_SRC C
void sr25519_derive_keypair_hard(sr25519_keypair derived, const sr25519_keypair keypair, const sr25519_chain_code chain_code);
#+END_SRC
** sr25519 types
#+BEGIN_SRC C
typedef uint8_t sr25519_mini_secret_key[32];
typedef uint8_t sr25519_secret_key[64];
typedef uint8_t sr25519_secret_key_key[32];
typedef uint8_t sr25519_secret_key_nonce[32];
typedef uint8_t sr25519_chain_code[32];
typedef uint8_t sr25519_public_key[32];
typedef uint8_t sr25519_keypair[96];
typedef uint8_t sr25519_signature[64];
#+END_SRC
